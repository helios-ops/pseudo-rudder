#ifndef H_GET_TEMU_DATA_H
	#define H_GET_TEMU_DATA_H

	#include <string.h>
	#include <ctype.h>
	#include <inttypes.h>
	
	#include "H_taint_record.h"

	

	
	

// 提供给符号执行的服务
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

	int GetTEMUReg_AccessIDByIndex( int index ) ;

	int GetReg_SizeByIndex(int index);

	int GetReg_Index(string name);

	char * GetRegNameByIndex(int index);

	int GetEFLAG_Bit_Index(string name);

	char * GetEFLAGBitNameByIndex(int index);

	

// 具体值
/* =================================================================================== */
// 读取内存的具体值
// int (* HH_TEMU_read_mem)(uint32_t vaddr, int len, void *buf);

void (* HH_TEMU_write_mem)(uint32_t vaddr, int len, void *buf);


// 读取寄存器的具体值
void (* HH_TEMU_read_register)( int    reg_idx, 
		     	        int    reg_offset, 
		      	        int    reg_size,
		     	        void * buf
		   	      );

void (* HH_TEMU_write_register)(int reg_id, void *buf);

//void (* HH_TEMU_read_register)(int reg_id, void *buf);

/* =================================================================================== */





// 污点检验与污点记录数据获取
/* =================================================================================== */

// 检验内存的污点状态，并提取相关的污点信息记录，返回相关的污点视图
uint64_t (* HH_taintcheck_memory_check)(uint32_t addr, int size,  uint8_t * records);


// 检验对应的寄存器污点状态，并提取相关的污点信息记录，返回相关的污点视图
uint64_t (* HH_taintcheck_register_check)(int reg, int offset, int size, uint8_t * records);



// 检验内存的污点状态，并提取相关的污点信息记录，返回相关的污点视图
uint64_t (* HH_taintcheck_taint_memory)(uint32_t addr, int size, uint64_t taint, uint8_t * records);


// Set 寄存器污点状态，并提取相关的污点信息记录，返回相关的污点视图
uint64_t (* HH_taintcheck_taint_register)(int reg, int offset, int size, uint64_t taint, uint8_t * records);

/* =================================================================================== */






	// 具体机器状态的获取
	/* ================================================================= */		

	// 读取 TEMU 机器执行中的内存具体值
	void  GetConcreteMemData( uint32_t address, 
				  int 	   len, 
				  void *   buf
				);
	
	void SetConcreteMemData( uint32_t address,
				 int	  len,
				 void *   buf
			       );



	// 读取 TEMU 机器执行中的寄存器具体值
	uint32_t GetConcreteRegData( string reg_name );
	
	void SetConcreteRegData( int reg_idx,
				 void * buf
			       );
	

	// 读取 TEMU 机器执行中的EFLAGS 的 bit 的具体值
	uint32_t GetConcreteEFLAGData( string bitname );

	void SetConcreteEFLAGData( int bit_index,
				   int bit_value
				 );
	/* ================================================================= */

	


	// 符号机器状态的获取
	// 要求用户预先分配缓冲区
	/* ================================================================= */
	uint64_t HH_Query_TemuRegisterTaintStatus( string 	      reg_name,
					           H_taint_record_t * h_reg_records
						 );

	
	uint32_t HH_Query_TemuEFLAGSTaintStatus( string       	    eflag_name,
						 H_taint_record_t * eflag_bit_expr
					       );


	uint64_t HH_Query_TemuMemTaintStatus( uint32_t    	   m_address,
					      int		   m_length,
					      H_taint_record_t *   h_taint_recoird
					    );
	/* ================================================================= */
	// 符号机器状态的获取



	// 符号机器状态的设置
	/* ================================================================= */
	int HH_Set_TemuRegisterByteTaintRecord( string	  	    reg_name,
				 		int		    taint_bitmap,
						H_taint_record_t *  taint_record
					      );


	int HH_Set_TemuEFAGSTaintRecord( string	  	     bit_name,
					 H_taint_record_t *  taint_record
				       );


	// 设置特定内存字节的符号值
	void HH_Set_TemuMemByteTaintRecord( uint32_t  		address,
					    int			size,
				   	    int		 	taint_bitmap,
					    H_taint_record_t *  taint_record
					  );	
	/* ================================================================= */
	// 符号机器状态的设置



/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */ 
// 提供给符号执行的服务
	

	
#endif
